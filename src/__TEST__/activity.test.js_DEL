import {createActivity, loadActivity} from '../backend/activity';
import db from '../db/dbInterface';

jest.mock('../db/dbInterface');
jest.mock('../helpers/idMaker');

beforeEach(() => {
    Object.keys(db).forEach(method => db[method].mockClear());
});

test('Create activity with default data', () => {
    const activity = createActivity();

    expect(activity.id > 0).toBe(true);
    expect(activity.hourlyRate === 0).toBe(true);
    expect(activity.client).toEqual({});
    expect(activity.parentActivity).toEqual({});
    expect(activity.name).toBe('new activity');
    expect(activity.subactivities).toEqual([]);
    expect(activity.timeEntries).toEqual([]);
    expect(db.create).toBeCalled();
});

test('Create activity with custom data', () => {
    const activity = createActivity({
        name: 'Custom name',
        hourlyRate: 10,
        client: {
            id: 1,
            name: 'baz'
        }
    });

    expect(activity.name).toEqual('Custom name');
    expect(activity.hourlyRate).toBe(10);
    expect(activity.client.id).toBe(1);
    expect(activity.client.name).toBe('baz');
});

test('activity.delete()', () => {
    const removeActivity = jest.fn();
    const deleteSubactivity = jest.fn();
    const parentActivity = {
        id: 2,
        removeSubactivity: jest.fn()
    }
    const activity = createActivity({
        client: {id: 1, removeActivity: removeActivity},
        parentActivity,
        subactivities: [{id: 1, delete: deleteSubactivity}]
    });

    activity.delete();
    expect(db.delete).toBeCalled();
    expect(removeActivity).toBeCalled();
    expect(parentActivity.removeSubactivity).toBeCalled();
    expect(deleteSubactivity).not.toBeCalled();
});

test('activity.delete(true) delete subactivities', () => {
    const activity = createActivity({
        client: [{deleteActivity: jest.fn()}],
        subactivities: [{delete: jest.fn()}, {delete: jest.fn()}]
    });

    activity.delete(true);
    expect(db.delete).toBeCalled();
    expect(activity.subactivities[0].delete).toBeCalled();
    expect(activity.subactivities[1].delete).toBeCalled();
});

test('activity.update()', () => {
    const activity = createActivity();
    
    const updatedActivity = activity.update({name: 'baz'});
    expect(updatedActivity.name).toBe('baz');
    expect(db.update).toBeCalled();    
});

test('activity.getTotaleTime()', () => {
    const activity = createActivity({
        subactivities: [{getTotalTime: function() {return 10}}, {getTotalTime: function() {return 10}}],
        timeEntries: [{
            startTime: 10,
            endTime: 20,
            duration: 10
        }, {
            startTime: 30,
            endTime: 40,
            duration: 10
        }]
    });

    expect(activity.getTotalTime()).toBe(40);
});

test('activity.getTotaleTime() since a specific time', () => {
    const activity = createActivity({
        timeEntries: [{
            startTime: 10,
            endTime: 20,
            duration: 10
        }, {
            startTime: 30,
            endTime: 40,
            duration: 10
        }]
    });

    expect(activity.getTotalTime(25)).toBe(10);
});

test('activity.getTotaleCost()', () => {
    const activity = createActivity({
        hourlyRate: 10,
    });

    activity.update({subactivities: [{getTotalCost: function() {return 10}}, {getTotalCost: function() {return 20}}]});

    expect(activity.getTotalCost()).toBe(30);
});

test('activity.getTotaleCost() since a specific time', () => {
    const activity = loadActivity({
        hourlyRate: 10,
        timeEntries: [{
            startTime: new Date("2/1/2017 16:00:00").getTime(),
            endTime: new Date("2/1/2017 17:00:00").getTime(),
            duration: 60 * 60 * 1000
        }, {
            startTime: new Date("2/3/2017 16:00:00").getTime(),
            endTime: new Date("2/3/2017 17:00:00").getTime(),
            duration: 60 * 60 * 1000
        }]
    });

    expect(activity.getTotalCost(new Date("2/2/2017 16:00:00").getTime())).toBe(10);
});

test('activity.addSubactivity()', () => {
    const activity = createActivity();

    const subactivity = {
        name: 'subactivity1'
    }
    const updatedActivity = activity.addSubactivity(subactivity);
    expect(updatedActivity.subactivities.length).toBe(1);
    expect(updatedActivity.subactivities[0].name).toBe('subactivity1');
    expect(updatedActivity.subactivities[0].parentActivity).toEqual(activity);
    expect(db.update).toBeCalled();    
});

test('activity.removeSubactivity()', () => {
    const activity = createActivity({
        subactivities: [{id: 1}, {id: 2}]
    });

    const updatedActivity = activity.removeSubactivity(2);
    expect(updatedActivity.subactivities.length).toBe(1);
    expect(db.update).toBeCalled();    
});

test('activity.removeSubactivity(id, true) delete subactivity', () => {
    const deleteSubactivity = jest.fn();
    const activity = createActivity({
        subactivities: [{id: 0}, {id: 1, delete: deleteSubactivity}]
    });

    const updatedActivity = activity.removeSubactivity(1, true);
    expect(updatedActivity.subactivities.length).toBe(1);
    expect(deleteSubactivity).toBeCalled();
    expect(db.update).toBeCalled();    
});

test('activity.start()', () => {
    const activity = createActivity({
        timeEntries: [{id: 0}]
    });

    const updatedActivity = activity.start();
    expect(updatedActivity.timeEntries.length).toBe(2);
    expect(updatedActivity.timeEntries[1].id).toBe(1);
    expect(db.update).toBeCalled();    
});

test('activity.stop()', () => {
    const activity = createActivity({
        timeEntries: [{id: 1, startTime: 1, endTime: 0}]
    });

    const updatedActivity = activity.stop();
    expect(updatedActivity.timeEntries[0].endTime > 0).toBe(true);    
});

test('activity.deleteTimeEntry()', () => {
    const activity = createActivity({
        timeEntries: [{id: 1}, {id: 2}]
    });

    const updatedActivity = activity.deleteTimeEntry(2);    
    expect(updatedActivity.timeEntries.length).toBe(1);
    expect(db.update).toBeCalled();    
});

test('activity.updateTimeEntry()', () => {
    const activity = createActivity({
        timeEntries: [{id: 1, startTime: 10, endTime: 20, duration: 10}]
    });

    const updatedActivity = activity.updateTimeEntry({id: 1, endTime: 30});    
    expect(updatedActivity.timeEntries[0]).toEqual({id: 1, startTime: 10, endTime: 30, duration: 20});
    expect(db.update).toBeCalled();    
});

test('activity.exportForDb()', () => {
    const activity = createActivity({
        name: 'activity',
        hourlyRate: 10,
        client: {id: 1, name: 'client'},
        parentActivity: {},
        timeEntries: [{id: 1, startTime: 10, endTime: 20}],
        subactivities: [{id: 1, name: 'baz'}, {id: 2, name: 'bar'}]
    });

    const activityReadyForDB = activity.exportForDb();    
    expect(activityReadyForDB).toEqual({
        id: activityReadyForDB.id,
        name: 'activity',
        hourlyRate: 10,
        client: {id: 1},
        parentActivity: {},
        timeEntries: [{id: 1, startTime: 10, endTime: 20}],
        subactivities: [{id: 1}, {id:2}]
    });
});


test('activity.exportForClient()', () => {
    const activity = createActivity({
        name: 'activity',
        hourlyRate: 10,
        parentActivity: {},
        client: {id: 1, name: 'client', lastBilledDate: 25},
        timeEntries: [{id: 1, startTime: 10, endTime: 20, duration: 1 * 1000 * 60 * 60}, {id: 2, startTime: 30, endTime: 40, duration: 1 * 1000 * 60 * 60}],
        subactivities: [{id: 1, name: 'baz'}, {id: 2, name: 'bar'}]
    });

    const activityReadyForClient = activity.exportForClient();    
    expect(activityReadyForClient).toEqual({
        id: activityReadyForClient.id,
        name: 'activity',
        hourlyRate: 10,
        parentActivity: {},
        client: {id: 1, name: 'client', lastBilledDate: 25},
        timeEntries: [{id: 1, startTime: 10, endTime: 20, duration: 1 * 1000 * 60 * 60, cost: 10}, {id: 2, startTime: 30, endTime: 40, duration: 1 * 1000 * 60 * 60, cost: 10}],
        subactivities: [{id: 1, name: 'baz'}, {id: 2, name: 'bar'}],
        totalTime: 2 * 1000 * 60 * 60,
        totalCost: 20,
        totalTimeToBill: 1 * 1000 * 60 * 60,
        totalCostToBill: 10
    });
});